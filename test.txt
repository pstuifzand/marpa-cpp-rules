#include <vector>
#include <algorithm>
#include <iostream>
#include <iterator>
#include <fstream>
#include <iomanip>
#include "util.h"
#include "marpa.h"
#include "symbol_table.h"
#include "error.h"

using namespace marpa;

%%

expr   ::= term                   {{ std::cout << $0 << "\n"; }}

term   ::= term add term          {{ $$ = $0 + $2; }}
term   ::= term sub term          {{ $$ = $0 - $2; }}
term   ::= factor                 {{ $$ = $0; }}

factor ::= factor mul factor      {{ $$ = $0 * $2; }}
factor ::= number                 {{ $$ = $0; }}

%%

int main() {
    grammar g;
    create_grammar(g);

    recognizer r(g);

    std::string input = "42 * 1 + 7 - 10";

    auto it = input.begin();

    while (it != input.end()) {
        if (isspace(*it)) {
            it++;
        }
        else if (isdigit(*it)) {
            auto n = parse_digit(it, input.end(), 10, '0');
            r.read(R_number, n.second, 1);
            it = n.first;
        }
        else if (*it == '+') {
            r.read(R_add, 0, 1);
            it++;
        }
        else if (*it == '-') {
            r.read(R_sub, 0, 1);
            it++;
        }
        else if (*it == '*') {
            r.read(R_mul, 0, 1);
            it++;
        }
        /*
        else if (*it == '(' || *it == ')') {
            r.read(*it == '(' ? T_LB : T_RB, 0, 1);
            it++;
        }*/
    }

    bocage b{r, r.latest_earley_set()};
    if (g.error() != MARPA_ERR_NONE) {
        std::cout << marpa_errors[g.error()] << "\n";
        return 1;
    }

    order o{b};
    tree t{o};

    /* Evaluate trees */
    while (t.next() >= 0) {
        value v{t};
        g.set_valued_rules(v);

        std::vector<int> stack;
        stack.resize(128);

        for (;;) {
            value::step_type type = v.step();

            switch (type) {
                case MARPA_STEP_INITIAL:
                    stack.resize(1);
                    break;
                case MARPA_STEP_TOKEN: {
                    stack.resize(std::max((std::vector<int>::size_type)v.result()+1, stack.size()));
                    stack[v.result()] = v.token_value();
                    break;
                }
                case MARPA_STEP_RULE: {
                    grammar::rule_id rule = v.rule();
                    stack.resize(std::max((std::vector<int>::size_type)v.result()+1, stack.size()));

                    /* BEGIN OF RULE SEMANTICS */
                    evaluate_rules(g, r, v, stack);
                    /* END OF RULE SEMANTICS */
                    break;
                }
                case MARPA_STEP_NULLING_SYMBOL: {
                    int res    = v.result();
                    stack[res] = v.token_value(); 
                    break;
                }
                case MARPA_STEP_INACTIVE:
                    goto END;
            }
        }
        END: ;
    }
}
