#include <vector>
#include <algorithm>
#include <iostream>
#include <iterator>
#include <fstream>
#include <iomanip>
#include "util.h"
#include "marpa-cpp/marpa.hpp"
#include "symbol_table.h"
#include "error.h"
#include "read_file.h"
#include "tree.hh"

const int T_TOP = 1;
const int T_VAL = 2;
const int T_LIT = 3;

struct node {
    int type;
    int val;
};

node make_node(int type, int val) {
    return node{type, val};
}

indexed_table<std::string> literals;
indexed_table<std::string> varnames;

template <class T>
void show2(T& t)
{
    if (t.type == T_VAL)
        std::cout << "var(" << varnames[t.val] << ")";
    if (t.type == T_LIT)
        std::cout << R"foo(literal(")foo" << literals[t.val] << R"("))";
    std::cout << "\n";
}

template <class T, class I>
void show2(T& t, I f, I l) {
    while (f != l) {
        for (int i = 0; i < t.depth(f); ++i) std::cout << "  ";
        show2(*f);
        ++f;
    }
}

tree<node> parse_tree{make_node(T_TOP, 0)};

%%

template ::= part+

part     ::= tag                                {{ parse_tree.append_child(parse_tree.begin(), make_node(T_VAL, $0)); }}
part     ::= literal                            {{ parse_tree.append_child(parse_tree.begin(), make_node(T_LIT, $0)); }}

tag      ::= tb name te                         {{ $$ = $1; }}
tag      ::= tb if name te template tb end te
tag      ::= tb for name in name te template tb end te

%%

template <class R, class I>
I read_varname(R& re, I first, I last) {
    auto end = parse_ident(first, last);
    std::string varname{first, end};
    int l = varnames.add(varname);
    re.read(R_name, l, 1);
    return end;
}

template <class I>
I read_tag(I first, I last, I first2, I last2) {
    auto end = match(first, last, first2, last2);
    return end;
}

int main(int argc, char** argv) {
    marpa::grammar g;
    create_grammar(g);

    marpa::recognizer r(g);

    if (argc != 2) {
        std::cout << "Usage: " << argv[0] << " string-input\n";
        return 1;
    }

    std::string input;
    read_file(argv[1], input);

    auto it = input.begin();

    bool literal = true;

    std::string tag_begin{"{{"};
    std::string tag_end{"}}"};

    while (it != input.end()) {
        if (literal) {
            auto end = read_tag(it, input.end(), 
                std::begin(tag_begin), std::end(tag_begin));

            if (it != end) {
                r.read(R_tb, 0, 1);
                literal = false;
                it = end;
                continue;
            }

            auto literal_start = it;
            auto literal_end   = std::find(it, input.end(), tag_begin[0]);

            if (literal_start != literal_end) {
                std::string literal{literal_start, literal_end};
                int l = literals.add(literal);
                r.read(R_literal, l, 1);
                it = literal_end;
            }
        } else {
            while (isspace(*it)) ++it;

            it = read_varname(r, it, input.end());

            while (isspace(*it)) ++it;

            auto end = read_tag(it, input.end(),
                    std::begin(tag_end), std::end(tag_end));
            if (it != end) {
                r.read(R_te, 0, 1);
                it = end;
            }

            literal = true;
        }
    }

    marpa::bocage b{r, r.latest_earley_set()};
    if (g.error() != MARPA_ERR_NONE) {
        std::cout << marpa_errors[g.error()] << "\n";
        return 1;
    }

    marpa::order o{b};
    marpa::tree t{o};

    /* Evaluate trees */
    while (t.next() >= 0) {
        std::cout << "Evaluation =================\n";
        parse_tree.clear();
        parse_tree.set_head(make_node(T_TOP, 0));

        marpa::value v{t};
        g.set_valued_rules(v);

        std::vector<int> stack;
        stack.resize(128);

        for (;;) {
            marpa::value::step_type type = v.step();

            switch (type) {
                case MARPA_STEP_INITIAL:
                    stack.resize(1);
                    break;
                case MARPA_STEP_TOKEN: {
                    stack.resize(std::max((std::vector<int>::size_type)v.result()+1, stack.size()));
                    stack[v.result()] = v.token_value();
                    break;
                }
                case MARPA_STEP_RULE: {
                    marpa::grammar::rule_id rule = v.rule();
                    stack.resize(std::max((std::vector<int>::size_type)v.result()+1, stack.size()));

                    /* BEGIN OF RULE SEMANTICS */
                    evaluate_rules(g, r, v, stack);
                    /* END OF RULE SEMANTICS */
                    break;
                }
                case MARPA_STEP_NULLING_SYMBOL: {
                    int res    = v.result();
                    //stack[res] = v.token_value(); 
                    break;
                }
                case MARPA_STEP_INACTIVE:
                    goto END;
            }
        }
        END: ;
        show2(parse_tree, parse_tree.begin(), parse_tree.end()); 
    }
}

